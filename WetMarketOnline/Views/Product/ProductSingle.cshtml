@using EWM.HelperClass;
@using EWM.Models;
@model MstProduct

@{
    ViewBag.Title = Model.ProductName;
    string directory = EWM.HelperClass.GeneralBLL.FileDirectory;

    List<MstProductImage> productImages = Model.GetImageList();
    productImages = productImages.OrderBy(l => l.ImageOrder).ToList();
    int maxValue = Model.Quantity.Value;

    bool customerHasReviewed = (ViewData["Reviewed"] == null) ? false : (bool)ViewData["Reviewed"];
    bool customerHasPurchased = (ViewData["Purchased"] == null) ? false : (bool)ViewData["Purchased"];
    string readonlyReview = (customerHasPurchased) ? "" : "readonly";
    int reviewCount = (ViewData["ReviewCount"] == null) ? 0 : int.Parse(ViewData["ReviewCount"].ToString());
}

<script type="text/javascript">

    $(document).ready(() => {
        reviewDisplay("@customerHasPurchased", "@customerHasReviewed");

        $("#addItem").click(e => { // Increment Item Unit
            var value = parseInt($("#itemValue").val());
            value += 1;

            if (value > @maxValue) {
                value = @maxValue;
            }

            $("#itemValue").val(value);
        })

        $("#subItem").click(e => { // Decrement Item Unit
            var value = parseInt($("#itemValue").val());
            value -= 1;

            if (value <= 0) { value = 1; }
            $("#itemValue").val(value);
        })

        $("#itemValue").change(e => { // Manual changing of item unit
            var value = parseInt($("#itemValue").val());

            if (isNaN($("#itemValue").val())) {
                $("#itemValue").val(1);
            } else if (value <= 0) {
                $("#itemValue").val(1);
            } else if (value > @maxValue) {
                $("#itemValue").val(@maxValue);
            }

        });

        $("#btnShoppingCart").click(e => { // Add to Shopping Cart button click
            addToShoppingCart();
        })

        $("#btnProductReviewImage").click(e => { // Product Review - Upload image click
            $("#productReviewImage").click();
        });

        $("#productReviewImage").change( // Image Upload
            function () {
                if ($(this).val() != "") {
                    $("#btnProductReviewImage").addClass("btn-success");
                    $("#btnProductReviewImage").removeClass("btn-info");
                    $("#btnProductReviewImage").text("Image(s) Uploaded");
                } else {
                    $("#btnProductReviewImage").addClass("btn-info");
                    $("#btnProductReviewImage").removeClass("btn-success");
                    $("#btnProductReviewImage").text("Upload Image");
                }
            });

        $("#btnSubmitReview").click(e => { // Submit Product Review
            if (validateReview()) {
                $("#ProductReviewForm").submit();
            }
        })

        //$("#reviewText").change(e => { // Verify customer login before adding review
        //    verifyLogin();
        //})

        $("#btnReviewEdit").click(e => { // Edit Review
            $("#productReviewDisplay").addClass("d-none");
            $("#productReviewEdit").removeClass("d-none");
        })

        $("#btnCancelReview").click(e => { // Cancel Review Edit
            $("#productReviewDisplay").removeClass("d-none");
            $("#productReviewEdit").addClass("d-none");
        })
    });

    function changeImage(element) { // Swap thumbnail image

        var mainImage = document.getElementById('mainImage');
        mainImage.src = element.src;
    }

    function addToShoppingCart() { // Add item to shopping cart
        var itemValue = parseInt($("#itemValue").val());

        if (isNaN(itemValue)) {
            alert("Please enter a valid value!");
        }

        $.ajax({
                type: "POST",
                url: '@Url.Action("AddToShoppingCart")',
                data: {
                    productId: '@Model.ProductId',
                    quantity: itemValue
                },
                dataType: "json",
                success: function (result) {
                    if (result != "Ok") {
                        alert(result);
                    } else {
                        $('#navCart').load('#navCart #navCart')
                            const toast = new bootstrap.Toast($("#cartToast"))
                            toast.show()
                    }
                }
            });
    }

    @*function verifyLogin() {
        $.ajax({
                type: "POST",
                url: '@Url.Action("CheckCustomerLogin")',
                dataType: "json",
                success: function (result) {
                    if (result != "Ok") {
                        alert(result);
                    }
                }
            });
    }*@

    function reviewDisplay(hasPurchased, hasReviewed) { // Review Display/Edit

        if ((hasPurchased == "True" && hasReviewed == "False") || hasPurchased == "False") {
            $("#productReviewEdit").removeClass("d-none");
            $("#productReviewDisplay").addClass("d-none");
        }

        if (hasReviewed == "True") {
            $("#productReviewEdit").addClass("d-none");
            $("#productReviewDisplay").removeClass("d-none");
        }
    }

    function validateReview() { // Check if all required review values are entered
        if ($("#productReviewText").val() != "" && $("#productReviewText").val() != null) {
            if ($("#1").prop("checked") || $("#2").prop("checked") || $("#3").prop("checked") || $("#4").prop("checked") || $("#5").prop("checked")) { return true; } else {
                alert("Please provide a rating!");
                return false;
            }
        } else {
            alert("Please provide a review!");
            return false;
        }
    }

    function editReviewImage(reviewImageId) { // Add Review Image id to deletion queue
        var confirmDelete = confirm("Are you sure you wish to remove this image?");

        if (confirmDelete) {
            var ids = $("#deleteReviewImage").val();

            if (ids != "") {
                ids = ids.concat(";", reviewImageId);
                $("#deleteReviewImage").val(ids);
            } else {
                $("#deleteReviewImage").val(reviewImageId);
            }

            $("#"+reviewImageId).addClass("d-none")
        } else {
            return;
        }
        return;
    }


</script>

<h2>@Model.ProductName</h2>

<div class="container mt-5 mb-5">
    <div class="card">
        <div class="row g-0">
            <div class="col-md-6 border-end">
                <div class="d-flex flex-column justify-content-center">
                    <div class="main_image">
                        @{

                            MstProductImage displayImg = (productImages.Count > 0) ? productImages[0] : null;
                            string displayLink = (displayImg != null) ? String.Concat(directory, displayImg.FileLocation) : "";
                            string displayDesc = (displayImg != null) ? displayImg.ImageDesc : "";
                        }
                        <img src="@displayLink" alt="@displayDesc" id="mainImage" width="350">

                    </div>
                    <div class="thumbnail_images">
                        <ul id="thumbnail">

                            @{

                                foreach (var img in productImages)
                                {
                                    if (img != null)
                                    {
                                        string imgLink = (img != null) ? String.Concat(directory, img.FileLocation) : "";

                                        <li><img onclick="changeImage(this)" src="@imgLink" width="70"></li>
                                    }
                                }
                            }

                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="p-3 right-side">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3>@Model.ProductName</h3>

                    </div>
                    <div class="mt-2 pr-3">
                        <p>@Model.ProductDesc</p>
                    </div>
                    <h3>RM @Decimal.Round(Model.Price.Value, 2)</h3>
                    <div class="ratings d-flex flex-row align-items-center">
                        <div class="d-flex flex-row">
                            @{
                                for (int k = 0; k < (int)Model.Rating; k++)
                                {
                                    <i class="bi bi-star-fill text-success"></i>
                                }

                                if (Model.Rating.ToString().Contains(".5"))
                                {
                                    <i class="bi bi-star-half text-success"></i>
                                }

                                decimal starsLeft = (5 - Model.Rating.Value);
                                for (int k = 0; k < (int)starsLeft; k++)
                                {
                                    <i class="bi bi-star text-success"></i>
                                }
                            }
                        </div>
                        <span>@reviewCount reviews</span>
                    </div>
                    <div class="mt-2 pr-3 content">
                        <p>@Model.GetMerchantName()</p>
                    </div>

                    <div class="buttons d-flex flex-row mt-5 gap-3">
                        <button class="btn btn-outline-dark" id="subItem"><i class="bi bi-dash"></i></button>
                        <input class="form-control" id="itemValue" type="text" value="1" aria-label="1">
                        <button class="btn btn-outline-dark" id="addItem"><i class="bi bi-plus"></i></button>
                        @*<button class="btn btn-dark">Add to Basket</button>*@
                    </div>

                    @* Add to Cart *@
                    <div class="buttons d-flex flex-row mt-5 pb-sm-5 gap-3">
                        @{
                            if (maxValue <= 0)
                            {
                                <button class="btn btn-dark disabled">Add to Cart</button>
                                <p class="text-danger">This item is currently not available</p>
                            }
                            else
                            {
                                <button id="btnShoppingCart" class="btn btn-outline-dark btn-lg">Add to Cart</button>
                            }
                        }
                        @*<button class="btn btn-dark">Add to Basket</button>*@
                    </div>

                </div>
            </div>
            <div class="row g-0  pb-3 ms-sm-4 align-items-sm-center">

                @*<div class="col-md-6 col-sm-10 mb-3">*@
                <div class="col-11 border-top border-1 py-3">
                    @{ Html.RenderAction("ProductReviewSummary_Partial", new { productId = Model.ProductId, rating = Model.Rating }); }
                </div>

                @*<div class="col-md-6 col-sm-10 mb-3 ">*@
                <div id="productReviewEdit" class="col-11 border-top border-1">
                    @{ Html.RenderAction("ProductReview_Partial", new { productId = Model.ProductId, readonlyReview }); }
                </div>

                <div id="productReviewDisplay" class="col-11">
                    @{ Html.RenderAction("ProductReviewCustomer_Card", new { productId = Model.ProductId, displayLocation = "ProductSingle" }); }
                </div>
            </div>
            <div class="my-3 ms-4 ps-md-3">
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productReviewAllPopup">View All Reviews</button>
            </div>
        </div>
    </div>

</div>
@*<button type="button" class="btn btn-primary" id="cartToastBtn">Show live toast</button>*@

@* Toast *@
<div class="toast-container position-fixed bottom-0 end-0 p-3">

    <div id="cartToast" class="toast align-items-center bg-dark border-1 border-white" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body text-white">
                Item has been added to cart.
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>

</div>

@{ Html.RenderAction("ProductReviewAll_PopupPartial", new { productId = Model.ProductId }); }